name: release:trdl-publish

on:
  push:
    branches:
      - main
    paths:
      - trdl_channels.yaml
  repository_dispatch:
    types: [ "release:trdl-publish" ]
  workflow_dispatch:
    inputs:
      force:
        description: "Force publish all images"
        required: false
        default: "false"

defaults:
  run:
    shell: bash

jobs:
  publish:
    name: Publish binaries for changed versions
    runs-on: ubuntu-22.04
    outputs:
      versions: ${{ steps.changed.outputs.versions }}
    steps:
#      - name: Notify
#        uses: mattermost/action-mattermost-notify@master
#        with:
#          MATTERMOST_WEBHOOK_URL: ${{ secrets.LOOP_NOTIFICATION_WEBHOOK }}
#          MATTERMOST_CHANNEL: ${{ secrets.LOOP_NOTIFICATION_CHANNEL }}
#          TEXT: |
#            ${{ secrets.LOOP_NOTIFICATION_GROUP }} [${{ github.workflow }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) task sign pls

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get previous trdl_channels.yaml
        run: |
          COMMIT_SHA=$(gh run list --workflow="release:trdl-publish" --status success --limit 1 --json headSha --jq '.[0].headSha')
          if [ -n "$COMMIT_SHA" ]; then
            git show "$COMMIT_SHA:trdl_channels.yaml" > trdl_channels_old.yaml
          else
            echo "No previous successful run, creating empty baseline"
            touch trdl_channels_old.yaml
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Find changed versions
        id: changed
        run: |
          versions=$(diff <(yq e '.groups[].channels[].version' trdl_channels_old.yaml 2>/dev/null | sort -u) \
                          <(yq e '.groups[].channels[].version' trdl_channels.yaml | sort -u) \
                          || true | grep '>' | awk '{print $2}')
          echo "versions=$versions"
          echo "versions=$versions" >> $GITHUB_OUTPUT

      - name: Install Task
        uses: arduino/setup-task@v1

      - name: Build and upload binaries
        if: steps.changed.outputs.versions != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for v in ${{ steps.changed.outputs.versions }}; do
            echo "Building binary for version $v"
            mkdir -p dist/$v/linux-amd64/bin
            task --yes build:dev:linux:amd64 \
              outputDir="dist/$v/linux-amd64/bin" \
              extraGoBuildArgs="-ldflags='-s -w'" \
              pkg=./cmd/delivery-kit

            cp dist/$v/linux-amd64/bin/delivery-kit dist/delivery-kit-linux-amd64

            if gh release view "v$v" >/dev/null 2>&1; then
              echo "Uploading to existing release v$v"
              gh release upload "v$v" dist/delivery-kit-linux-amd64 --clobber --name "delivery-kit-linux-amd64"
            else
              echo "Creating new prerelease v$v"
              gh release create "v$v" --title "v$v [pre]" --prerelease
              gh release upload "v$v" dist/delivery-kit-linux-amd64 --clobber --name "delivery-kit-linux-amd64"
            fi
          done

  update_release:
    name: Update release metadata
    runs-on: ubuntu-22.04
    needs: publish
    if: needs.publish.outputs.versions != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Update GitHub releases based on trdl_channels.yaml
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          changed="${{ needs.publish.outputs.versions }}"

          echo "Updating releases only for changed versions: $changed"

          check_release_exists() {
            local version=$1
            gh release view "v$version" >/dev/null 2>&1
            return $?
          }

          get_release_name() {
            local tag=$1
            gh release view "$tag" --json name | jq -r '.name'
          }

          for version in $changed; do
            tag="v$version"
            group=$(yq e ".groups[] | select(.channels[].version == \"$version\") | .name" trdl_channels.yaml)
            channels=$(yq e -o=j -I=0 ".groups[] | select(.channels[].version == \"$version\") | .channels[] | select(.version == \"$version\") | .name" trdl_channels.yaml | jq -r '.name' | tr '\n' ',' | sed 's/,$//')

            if check_release_exists "$version"; then
              expected_title="$tag [$channels]"
              current_title=$(get_release_name "$tag")

              if [[ "$current_title" != "$expected_title" ]]; then
                if [[ $group == "2" && $channels == *stable* ]]; then
                  echo "Updating $tag (group $group): stable, latest"
                  gh release edit "$tag" --title "$expected_title" --latest --prerelease=false || true
                elif [[ $channels == *rock-solid* ]]; then
                  echo "Updating $tag (group $group): rock-solid"
                  gh release edit "$tag" --title "$expected_title" --prerelease=false --latest=false || true
                else
                  echo "Updating $tag (group $group): prerelease, channels=$channels"
                  gh release edit "$tag" --title "$expected_title" --prerelease --latest=false || true
                fi
              else
                echo "$tag already has correct title: $current_title"
              fi
            else
              echo "Release $tag not found, skipping..."
            fi
          done


#  notify:
#    if: always()
#    needs:
#      - publish
#      - update_release
#    uses: werf/common-ci/.github/workflows/notification.yml@main
#    secrets:
#      loopNotificationGroup: ${{ secrets.LOOP_NOTIFICATION_GROUP }}
#      webhook: ${{ secrets.LOOP_NOTIFICATION_WEBHOOK }}
#      notificationChannel: ${{ secrets.LOOP_NOTIFICATION_CHANNEL }}
