name: release:trdl-publish

on:
  push:
    branches:
      - main
    paths:
      - trdl_channels.yaml
  repository_dispatch:
    types: [ "release:trdl-publish" ]
  workflow_dispatch:
    inputs:
      force:
        description: "Force publish all images"
        required: false
        default: "false"

defaults:
  run:
    shell: bash

jobs:
  publish:
    name: Publish binaries for changed versions
    runs-on: ubuntu-22.04
    outputs:
      versions: ${{ steps.changed.outputs.versions }}
    steps:
#      - name: Notify
#        uses: mattermost/action-mattermost-notify@master
#        with:
#          MATTERMOST_WEBHOOK_URL: ${{ secrets.LOOP_NOTIFICATION_WEBHOOK }}
#          MATTERMOST_CHANNEL: ${{ secrets.LOOP_NOTIFICATION_CHANNEL }}
#          TEXT: |
#            ${{ secrets.LOOP_NOTIFICATION_GROUP }} [${{ github.workflow }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) task sign pls

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install yq & task
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          curl -sSL https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64 -o /usr/local/bin/yq
          chmod +x /usr/local/bin/yq
          curl -sSL https://taskfile.dev/install.sh | sh

      - name: Install Task
        uses: arduino/setup-task@v1

      - name: Get previous trdl_channels.yaml
        run: |
          COMMIT_SHA=$(gh run list --workflow="release:trdl-publish" \
            --status success --limit 1 --json headSha --jq '.[0].headSha')
          if [ -n "$COMMIT_SHA" ]; then
            git show "$COMMIT_SHA:trdl_channels.yaml" > trdl_channels_old.yaml || true
          else
            echo "No old file found"
            : > trdl_channels_old.yaml
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish binaries
        run: ./scripts/ci/publish-binaries.sh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TASK_X_REMOTE_TASKFILES: 1

  update_release:
    name: Update release metadata
    runs-on: ubuntu-22.04
    needs: publish
    if: needs.publish.outputs.versions != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Update GitHub releases based on trdl_channels.yaml
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          check_release_exists() {
            local version=$1
            gh release view "v$version" >/dev/null 2>&1
            return $?
          }

          get_release_name() {
            local tag=$1
            gh release view "$tag" --json name | jq -r '.name'
          }

          process_releases() {
            echo "Processing releases based on trdl_channels.yaml..."

            declare -A VERSION_CHANNELS
            declare -A GROUP_VERSIONS

            current_group=""
            while IFS= read -r line; do
              if [[ $line =~ name:\ \"([^\"]+)\" ]]; then
                current_group="${BASH_REMATCH[1]}"
              elif [[ $line =~ name:\ ([a-z-]+) ]]; then
                current_channel="${BASH_REMATCH[1]}"
              elif [[ $line =~ version:\ ([0-9a-zA-Z.+-]+) ]]; then
                version="${BASH_REMATCH[1]}"
                key="${current_group}:${version}"
                if [[ -z "${VERSION_CHANNELS[$key]}" ]]; then
                  VERSION_CHANNELS["$key"]="$current_channel"
                  GROUP_VERSIONS["$version"]="$current_group"
                else
                  VERSION_CHANNELS["$key"]="${VERSION_CHANNELS[$key]},$current_channel"
                fi
              fi
            done < trdl_channels.yaml

            for key in "${!VERSION_CHANNELS[@]}"; do
              version="${key#*:}"
              group="${key%:*}"
              tag="v$version"

              if check_release_exists "$version"; then
                channels="${VERSION_CHANNELS[$key]}"
                expected_title="$tag [$channels]"
                current_title=$(get_release_name "$tag")

                if [[ "$current_title" != "$expected_title" ]]; then
                  if [[ $group == "2" && $channels == *stable* ]]; then
                    echo "Updating $tag (group $group): stable, latest"
                    gh release edit "$tag" --title "$expected_title" --latest --prerelease=false || true
                  elif [[ $channels == *rock-solid* ]]; then
                    echo "Updating $tag (group $group): rock-solid, just title"
                    gh release edit "$tag" --title "$expected_title" --prerelease=false || true
                  else
                    echo "Updating $tag (group $group): prerelease, channels=$channels"
                    gh release edit "$tag" --title "$expected_title" --prerelease || true
                  fi
                else
                  echo "$tag (group $group) already has correct title: $current_title"
                fi
              else
                echo "Release $tag (group $group) not found, skipping..."
              fi
            done

            echo "Checking for releases with outdated channel markers..."
            gh release list --json name | jq -r '.[] | select(.name | test("\\[[a-zA-Z,-]+\\]")) | .name' | while read -r full_name; do
              tag="${full_name%% *}"
              version="${tag#v}"

              [[ -n "${GROUP_VERSIONS[$version]}" ]] && continue

              echo "Resetting $tag to plain version title (no channels in config)"
              gh release edit "$tag" --title "$tag" --prerelease=false || true
            done
          }

          process_releases


#  notify:
#    if: always()
#    needs:
#      - publish
#      - update_release
#    uses: werf/common-ci/.github/workflows/notification.yml@main
#    secrets:
#      loopNotificationGroup: ${{ secrets.LOOP_NOTIFICATION_GROUP }}
#      webhook: ${{ secrets.LOOP_NOTIFICATION_WEBHOOK }}
#      notificationChannel: ${{ secrets.LOOP_NOTIFICATION_CHANNEL }}
